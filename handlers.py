from aiogram import F, Router
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.enums import ContentType
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from states import *
from config import *
from keyboards import *
router = Router()


@router.message(Command('start'))
async def start_handler(message: types.Message=None, callback_query: types.CallbackQuery=None, state: FSMContext=None,) -> None:
    try:
        await state.clear()
        caption = '<b>‚åõÔ∏è–≠–∫–æ–Ω–æ–º—å—Ç–µ –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ</b>\n\n–ë—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω—É–∂–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã. –ü—Ä–æ—â–∞–π –≤–æ–ª–æ–∫–∏—Ç–∞! üëã'
        if message:
            await message.delete()
            user_id = message.from_user.id
            await message.answer(caption, reply_markup=menu_keyboard())
        if callback_query:
            user_id = callback_query.from_user.id
            await callback_query.message.edit_text(caption, reply_markup=menu_keyboard())

    except Exception as e:
        await error_handler(user_id, e)


@router.callback_query(lambda c: c.data == "menu")
async def menu_callback(callback_query: types.callback_query, state: FSMContext) -> None:
    await start_handler(state=state, callback_query=callback_query)


@router.callback_query(lambda c: c.data == "download_template")
async def download_template_callback(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await callback_query.message.delete()
    try:
        media_group = MediaGroupBuilder()

        media_group.add_document(
            media=VERTICAL_TEMPLATE_FILE_ID,
            caption="–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω"
        )
        media_group.add_document(
            media=HORIZONTAL_TEMPLATE_FILE_ID,
            caption="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω"
        )

        await callback_query.message.answer_media_group(
            media=media_group.build()
        )

        await callback_query.message.answer(
            "‚úÖ –®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
            reply_markup=download_template_keyboard()
        )

        await callback_query.answer()

    except Exception as e:
        await error_handler(callback_query.from_user.id, e)


@router.callback_query(lambda c: c.data == "support")
async def support_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        await state.set_state(supportState.message)
        user_id = callback_query.from_user.id
        await callback_query.message.edit_text("<b>üõü –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=support_keyboard())
    except Exception as e:
        await error_handler(user_id, e)


@router.callback_query(lambda c: c.data == "info")
async def info_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        await state.set_state(supportState.message)
        user_id = callback_query.from_user.id
        await callback_query.message.edit_text("<b>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n1) –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏\n2) –ú—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–ª—è –í–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π —Ç–∞—Ä–∏—Ñ\n3) –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—á–µ—Ç–æ–≤", reply_markup=info_keyboard())
    except Exception as e:
        await error_handler(user_id, e)


@router.callback_query(lambda c: c.data == "calculate")
async def calculate_handler(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    try:
        await state.set_state(uploadFile.message_id)
        await state.update_data(message_id=callback_query.message.message_id)

        user_id = callback_query.from_user.id
        await callback_query.message.edit_text("<b>üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –í–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?</b>\n\n–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx", reply_markup=calculate_keyboard())
    except Exception as e:
        await error_handler(user_id, e)


@router.message(F.document, StateFilter(uploadFile.message_id))
async def state_upload_file(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    await message.delete()
    try:
        document = message.document
        file_name = document.file_name
        file_ext = os.path.splitext(file_name)[1].lower() if file_name else None

        state_data = await state.get_data()
        message_id = state_data.get('message_id')

        ALLOWED_EXTENSIONS = ['.xlsx', '.xml']
        try:
            if file_ext not in ALLOWED_EXTENSIONS:
                await bot.edit_message_text(chat_id=user_id, message_id=message_id, text="<b>‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.</b>\n\n–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .xlsx –∏ .xml. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", reply_markup=calculate_keyboard())
                return
        except:
            pass

        if message_id:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="üöÄ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..."
            )

        file_path = os.path.join(DOWNLOAD_DIR, file_name)
        file = await bot.get_file(document.file_id)
        await bot.download_file(file.file_path, file_path)

        if message_id:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_name}\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É..."
            )

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫—ç–Ω–¥
        # await send_to_backend(file_path)

    except Exception as e:
        await error_handler(user_id, e)
        await message.reply("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")


@router.message(F.text, StateFilter(supportState.message))
async def state_files(message: types.Message, state: FSMContext) -> None:
    try:
        message_id_to_reply = message.message_id
        message_text = message.text
        user_name = message.from_user.first_name
        user_id = message.from_user.id
        await bot.send_message(ADMIN_ID, f"<b>‚úâÔ∏è –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç </b>{user_name}\n\n<code>{message_text}</code>\n\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n#{message_id_to_reply}, #{user_id}")
        await message.answer("<b>‚ö°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n–°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!")
    except Exception as e:
        await error_handler(user_id, e)


async def error_handler(user_id: int, e: str) -> None:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É {user_id}\n{e}")
    await bot.send_message(user_id, "<b>ü§™ –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤–æ–µ –º–µ–Ω—é:", reply_markup=menu_keyboard())


@router.message(F.text)
async def handle_all_messages(message: types.Message):
    if str(message.from_user.id) == str(ADMIN_ID):
        if message.reply_to_message:
            try:
                reply_text = message.reply_to_message.text
                lines = reply_text.split('\n')
                last_line = lines[-1].strip()

                tags = last_line.split(', ')
                if len(tags) >= 2 and tags[0].startswith('#') and tags[1].startswith('#'):
                    original_message_id = int(tags[0][1:])
                    user_id = int(tags[1][1:])

                    await message.bot.send_message(
                        chat_id=user_id,
                        text=f"<b>üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{message.text}",
                        reply_to_message_id=original_message_id
                    )
                    await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                else:
                    await message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            except Exception as e:
                await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        else:
            pass
    else:
        message_id_to_reply = message.message_id
        message_text = message.text
        user_name = message.from_user.first_name
        user_id = message.from_user.id
        await bot.send_message(ADMIN_ID,
                               f"<b>‚úâÔ∏è –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç </b>{user_name}\n\n<code>{message_text}</code>\n\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n#{message_id_to_reply}, #{user_id}")
        await message.answer("<b>‚ö°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.</b>\n\n–°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!")