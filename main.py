import logging
import sys
import asyncio

from aiogram.methods import DeleteWebhook
from handlers import router
from middlewares import *
from config import dp, bot, ADMIN_ID

dp.include_router(router)


async def main() -> None:
    dp.message.middleware(AntiFloodMiddleware())
    dp.callback_query.middleware(AntiFloodMiddleware())
    dp.message.middleware(CheckNewUser())
    dp.callback_query.middleware(CheckNewUser())

    try:
        await bot(DeleteWebhook(drop_pending_updates=True))
        await bot.send_message(chat_id=ADMIN_ID, text='<b>‚ùáÔ∏è –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω.</b>')
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        await shutdown()
        raise


async def shutdown() -> None:
    try:
        await bot.send_message(chat_id=ADMIN_ID, text='<b>üö´ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.</b>')
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")

    try:
        await dp.stop_polling()
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")

    try:
        await bot.session.close()
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

    print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        asyncio.run(shutdown())
    except Exception as e:
        logging.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
        asyncio.run(shutdown())